package com.click.interview.main;

import com.click.interview.contract.Operation;
import com.click.interview.contract.impl.Add;
import com.click.interview.contract.impl.ListTransaction;
import com.click.interview.contract.impl.Show;
import com.click.interview.contract.impl.Sum;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;

/**
 * Source code generated by Gerardo Pucheta Figueroa to Click Mexico
 * Twitter: @ledzedev
 * http://ledze.mx
 * 9/21/2018
 */
public class InterviewApplication {
    private static final Logger LOG = LoggerFactory.getLogger(InterviewApplication.class);

    public static void main(String[] args) {
        if (args.length >= 2 && args.length < 4) {
            int userId = -1;
            try {
                userId = Integer.parseInt(args[0]);
            } catch (NumberFormatException e) {
                LOG.error("The first parameter should be a parseable integer as user id.", e);
                System.exit(100);
            }

            String param2 = args[1];
            Operation op = null;
            try {
                String[] ops = {"add", "list", "sum"};
                Arrays.sort(ops);
                int x = Arrays.binarySearch(ops, param2);
                LOG.info("found index in:{}", x);
                if( x >= 0 ){

                    switch (param2) {
                        case "add":
                            String tranJson = args[2];
                            op = new Add(userId, tranJson);
                            break;
                        case "list":
                            op = new ListTransaction(userId);
                            break;
                        case "sum":
                            op = new Sum(userId);
                            break;
                        default:
                            break;
                    }
                } else {
                    op = new Show(userId, param2);
                }
            } catch (Exception e) {
                LOG.error("Invalid 2nd parameter. Should be the operation or transaction id.",e);
                System.exit(200);
            }

            if (op != null) {
                String res = new OperationExecutor().exec(op);
                LOG.info("\n{}", res);
            }
        } else {
            LOG.error("Missing arguments, finishing app...");
            System.exit(-100);
        }
    }

}

class OperationExecutor {
    private static final Logger LOG = LoggerFactory.getLogger(OperationExecutor.class);

    String exec(Operation op) {
        String result;

        result = op.execute();
        LOG.info("executor result: {}", result);
        return result;
    }
}
